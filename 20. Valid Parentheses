class Solution {
    public boolean isValid(String s) {
        
        
        Map<Character,Character> bracketRelationMap = Map.of(')','(',']','[','}','{');
        
        List<Character> openingBracketsList = new ArrayList<>(List.of('(','[','{'));
        List<Character> closingBracketsList = new ArrayList<>(List.of(')',']','}'));
        List<Character> bracketsSequentionList = new ArrayList<>();
        
        for(int j=0;j<openingBracketsList.size();j++)
        {
            final int k=j;
            if (s.chars().filter(ch->ch==openingBracketsList.get(k)).count()!=s.chars().filter(ch->ch==closingBracketsList.get(k)).count()) return false;
        }
        
        for(int i=0;i<s.length();i++){
            if(openingBracketsList.contains(s.charAt(i)))  
                bracketsSequentionList.add(s.charAt(i));
            else if (closingBracketsList.contains(s.charAt(i)) )
                if( bracketsSequentionList.size()<=0) return false;
                else if (bracketRelationMap.get(s.charAt(i)) == bracketsSequentionList.get(bracketsSequentionList.size()-1))
                    bracketsSequentionList.remove(bracketsSequentionList.size()-1);
                else 
                    return false;         
        }
        return true;
    }
}

/*
20. Valid Parentheses

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.

Example 1:
Input: s = "([)]"
Output: false

Input: s = "{[]}"
Output: true
*/
