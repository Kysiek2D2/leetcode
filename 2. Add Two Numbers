/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        List list1 = new ArrayList();
        ListNode tempNode1=l1;
        ListNode outputNode;
        
        for(int i=0;;i++){
            list1.add(tempNode1.val);
            if(tempNode1.next!=null){
                tempNode1=tempNode1.next;
            }else break;
        }
        
        for(int j=0;j<list1.size();j++){
            outputNode(list1.get(j))
        }
        
        return null;
    }
}
