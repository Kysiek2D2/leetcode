/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
     ListNode currentNode = l1;
        ListNode nextNode;
        boolean nextNodeExists;
        
        //join nodes
        if(l1==null && l2==null)
        {
            return null;
        }
        else if(l1==null)
        {
            l1=l2;
        }
        else if(l2==null)
        {
            currentNode=l1;
        }
        else //when both nodes are not empty
        {
            currentNode=l1;
            nextNodeExists = true;
            while(nextNodeExists)
            {
                nextNode=currentNode.next;
                if(currentNode.next==null) 
                {
                    currentNode.next=l2; 
                    nextNodeExists=false;
                } 
                else
                {
                   currentNode=nextNode;
                }
            }
            
        }
        
        System.out.println(printNodes(l1));

        //sort nodes
        ListNode previousNode = null;
        ListNode firstNode = l1;
        currentNode = firstNode;
        nextNodeExists = true;
        while(nextNodeExists)
        { 
            if(currentNode.next==null) 
            {
                nextNodeExists=false;
            }
            else
            {
                nextNode=currentNode.next;
                if(nextNode.val<currentNode.val)
                {                    
                    currentNode.next=nextNode.next;
                    nextNode.next=currentNode;
                    if(previousNode!=null)
                    {
                        previousNode.next=nextNode;
                    }
                    else
                    {
                        l1=l2;
                    }   
                    currentNode = l1; //we start from the beginning
                    previousNode=null;
                }
                else
                {
                    previousNode=currentNode;
                    currentNode=nextNode;
                }
                    
            }
            System.out.println("Nodes order: "+printNodes(l1));
        }
        
        return l1;
        
    }

    public static String printNodes(ListNode node){
            boolean nextNodeExists = true;
            String outputString = "";
            ListNode currentNode = node;
            
            while(nextNodeExists)
            {
                if(currentNode.next==null)
                {
                    outputString=outputString+currentNode.val+".";
                    nextNodeExists=false;
                }
                else
                {
                    outputString=outputString+currentNode.val+".";
                    currentNode=currentNode.next;
                }
            }
            return outputString;
    }
}

/*
-------------------------------------------------------------------------------------------------------------------------
Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.

Example:
Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]
*/
